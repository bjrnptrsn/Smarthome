blueprint:
  name: Adaptive Lighting Control
  domain: automation
  input:
    light_target:
      name: Light target
      description: Select the light targets to be controlled.
      default: {}
      selector:
        target:
          entity:
            domain: light
    scene_target:
      name: Scene (optional)
      description: Select a scene that will be used to turn on the light.
      default: {}
      selector:
        target:
          entity:
            domain: scene
    automation_target:
      name: Hue Smart Scene Automation (optional)
      description: Select a Smart Scene automation to be activated.
      default: {}
      selector:
        target:
          entity:
            domain: automation
    motion_entity:
      name: Motion sensor
      description: Select the motion sensor to trigger.
      default:
      selector:
        entity:
          domain: binary_sensor
    motion_off_delay:
      name: No motion delay
      description: Set the duration after no motion detection the light is turned off.
      default: 120
      selector:
        number:
          min: 0.0
          max: 900.0
          unit_of_measurement: seconds
          step: 1.0
          mode: slider
    illuminance_sensor:
      name: Illuminance sensor (optional)
      description: Select an illuminance sensor to measure the amount of light in the room.
      default: []
      selector:
        entity:
          domain: sensor
    illuminance_cutoff:
      name: Illuminance cutoff value
      description: Set the threshold (in lux) up to which the light is turned on.
      default: 0.0
      selector:
        number:
          min: 0.0
          max: 100.0
          unit_of_measurement: lx
          step: 1.0
          mode: slider
    use_elevation:
      name: Sun elevation check
      description: Enable checking the sun's elevation angle.
      default: false
      selector:
        boolean: {}
    elevation_angle:
      name: Sun elevation angle
      description: Elevation threshold (in degrees). Light turns on only if sun elevation angle is below this value.
      default: 0
      selector:
        number:
          min: -90.0
          max: 90.0
          unit_of_measurement: degrees
          step: 1.0
          mode: slider
    use_energymode:
      name: Enable energy saving mode
      description: If no motion is detected for the set delay, the light turned off.
      default: true
      selector:
        boolean: {}
    energy_save_delay:
      name: Energy saving mode delay
      description: Set the delay time for the energy saving mode.
      default: 30
      selector:
        number:
          min: 5.0
          max: 120.0
          unit_of_measurement: minutes
          step: 1.0
          mode: slider
    lightswitch:
      name: Light switch (optional)
      description: Select a light switch sensor entity to control manual mode.
      default: []
      selector:
        entity:
          domain: sensor
    blocker:
      name: Manual mode automation blocker (optional)
      description: Select an input_boolean entity. If active, the automation is blocked.
      default: []
      selector:
        entity:
          domain: input_boolean
    timer_blocker:
      name: Manual mode timer entity (optional)
      description: Select a timer entity. After completion, the automation is active again.
      default: []
      selector:
        entity:
          domain: timer
    timer_duration:
      name: Manual mode timer duration
      description: Set the timer duration.
      default: 5.0
      selector:
        number:
          min: 5.0
          max: 120.0
          unit_of_measurement: minutes
          step: 1.0
          mode: slider
    use_nightmode:
      name: Enable night mode
      description: Light control is ***blocked*** during the night mode.
      default: false
      selector:
        boolean: {}
    reverse_nightmode_logic:
      name: Reverse night mode logic
      description: Light control is ***exclusively active*** during the night mode.
      default: false
      selector:
        boolean: {}
    offset_midnight:
      name: Offset to midnight
      description: Offset to midnight used to define the start of the night mode.
      default: 0.0
      selector:
        number:
          min: -120.0
          max: 120.0
          unit_of_measurement: minutes
          step: 1.0
          mode: slider
    offset_sunrise:
      name: Offset to sunrise
      description: Offset from sunrise used to define the end of the night mode.
      default: 0.0
      selector:
        number:
          min: -120.0
          max: 0.0
          unit_of_measurement: minutes
          step: 1.0
          mode: slider
mode: restart
max_exceeded: silent
variables:
  lights: !input light_target
  lights_on_check: >
    {% set count = namespace(on=0) %}
    {% if 'area_id' in lights %} 
      {% for area in ([lights.area_id] if lights.area_id is string else lights.area_id) %}
        {% set count.on = count.on + expand(area_entities(area)) | selectattr('entity_id', 'match', '^light\..*') | selectattr('state', 'eq', 'on') | list | count %}
      {% endfor %}
    {% endif %}
    {% if 'device_id' in lights %} 
      {% for device in ([lights.device_id] if lights.device_id is string else lights.device_id) %}
        {% set count.on = count.on + expand(device_entities(device)) | selectattr('state', 'eq', 'on') | list | count %}
      {% endfor %}
    {% endif %}
    {% if 'entity_id' in lights %} 
      {% for entity in ([lights.entity_id] if lights.entity_id is string else lights.entity_id) %}
        {% set count.on = count.on + expand(entity) | selectattr('state', 'eq', 'on') | list | count %}
      {% endfor %}
    {% endif %}
    {{ count.on > 0 }}
  scene_target: !input scene_target
  scene_entities: >
    {% if 'entity_id' in scene_target %} 
      {{ ([scene_target.entity_id] if (scene_target.entity_id is string) else (scene_target.entity_id)) }}
    {% endif %}
  automation_target: !input automation_target
  motion_entity: !input motion_entity
  motion_state: "{{ iif(states(motion_entity) == 'on') if (motion_entity) else False }}"
  motion_off_delay: !input motion_off_delay
  motion_last_seconds: "{{ ((now() - states[motion_entity].last_changed).total_seconds() | int) if (motion_entity) else 999 }}"
  illuminance_sensor: !input illuminance_sensor
  illuminance_cutoff: !input illuminance_cutoff
  illuminance_check: "{{ not (illuminance_cutoff) or (states(illuminance_sensor) | int <= illuminance_cutoff | int) if (illuminance_sensor) else True }}"
  use_elevation: !input use_elevation
  elevation_angle: !input elevation_angle
  elevation_check: "{{ not (use_elevation) or (state_attr('sun.sun', 'elevation') <= elevation_angle | float(90)) }}"
  use_energymode: !input use_energymode
  energy_save_delay: !input energy_save_delay
  energy_save_check: "{{ (use_energymode) and (motion_last_seconds > (energy_save_delay * 60)) and (lights_on_check) and not (motion_state) }}"
  blocker: !input blocker
  blocker_state: "{{ iif(states(blocker) == 'on') if (blocker) else False }}" 
  timer_blocker: !input timer_blocker
  timer_duration: !input timer_duration
  use_nightmode: !input use_nightmode
  reverse_nightmode_logic: !input reverse_nightmode_logic
  offset_midnight: !input offset_midnight
  offset_sunrise: !input offset_sunrise
  nightmode_check: >
    {% set sunrise = as_local(as_datetime(states('sensor.sun_next_rising'))) + timedelta(minutes=offset_sunrise) %}
    {% set night = as_local(now().combine( sunrise.date(), (strptime('0', '%H').time())) + timedelta(minutes=offset_midnight)) %}
    {{ not (use_nightmode) or ((night <= now() < sunrise) == reverse_nightmode_logic) }}
trigger:
  - platform: state
    entity_id: !input motion_entity
    from: "off"
    to: "on"
    id: 'motion_on'
  - platform: state
    entity_id: !input motion_entity
    from: "on"
    to: "off"
    for: !input motion_off_delay
    id: 'motion_off'
  - platform: state
    entity_id: !input lightswitch
    to: singleclick
    id: 'singleclick'
  - platform: state
    entity_id: !input lightswitch
    to: longpress
    id: 'longpress'
  - platform: time_pattern
    minutes: "/1"
    id: 'energy_timer'
  - platform: event
    event_type: timer.finished
    event_data:
      entity_id: !input timer_blocker
    id: 'manual_timer'
condition:
  - or:
      - "{{ (trigger.id in ['motion_on', 'motion_off']) and not (blocker_state) }}"
      - "{{ (trigger.id == 'singleclick') and (nightmode_check) }}"
      - "{{ (trigger.id == 'longpress') }}"
      - "{{ (trigger.id == 'manual_timer') and (blocker_state) }}"
      - "{{ (trigger.id == 'energy_timer') and (energy_save_check) and not (blocker_state) }}"
action:
  - if:
      - "{{ (trigger.id == 'singleclick') and (blocker != []) }}"
    then:
      - service: input_boolean.turn_on
        target:
          entity_id: "{{ blocker }}"
      - if:
          - "{{ (timer_blocker != []) }}"
          - condition: template
            value_template: >
              {% set finish = state_attr(timer_blocker, 'finishes_at') %}
              {% if (finish == none) or not (blocker_state) %}
                {{ True }}
              {% else %}
                {{ (as_datetime(finish) - now()) < timedelta(seconds=int(timer_duration * 60 / 2)) }}
              {% endif %}
        then:
          - service: timer.start
            data:
              duration: "{{ timer_duration * 60 }}"
            target:
              entity_id: "{{ timer_blocker }}"
  - if:
      - or:
          - "{{ trigger.id == 'singleclick' }}"
          - and:
              - "{{ (trigger.id == 'motion_on') }}"
              - "{{ (illuminance_check) }}"
              - "{{ (elevation_check) }}"
              - "{{ (nightmode_check) }}"
    then:
      - if:
          - "{{ automation_target != {} }}"
        then:
          - service: automation.trigger
            data:
              skip_condition: false
              variables:
                message: 'enable'
            target: !input automation_target
      - if:
          - "{{ scene_target != {} }}"
        then:
          - repeat:
              count: 3
              sequence:
                - repeat:
                    count: "{{ scene_entities | length }}"
                    sequence:
                      - service: scene.turn_on
                        target:
                          entity_id: "{{ scene_entities[repeat.index - 1] }}"
                      - delay:
                          milliseconds: 300
        else:
          - service: light.turn_on
            target: !input light_target
  - if:
      - "{{ (trigger.id in ['longpress', 'manual_timer']) and (blocker != []) }}"
    then:
      - service: input_boolean.turn_off
        target:
          entity_id: "{{ blocker }}"
      - if:
          - "{{ (trigger.id == 'longpress') and (timer_blocker != []) }}"
        then:
          - service: timer.cancel
            target:
              entity_id: "{{ timer_blocker }}"
  - if:
      - "{{ (trigger.id in ['motion_off', 'longpress', 'energy_timer', 'manual_timer']) }}"
    then:
      - service: light.turn_off
        target: !input light_target