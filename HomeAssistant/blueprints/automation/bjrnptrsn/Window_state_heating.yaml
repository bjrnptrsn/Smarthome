blueprint:
  name: Window State Heating Control
  domain: automation
  description: "
    \n## Window State Heating Control
    \n### Description:
    \n- Introducing the Window State Heating Control â€“ your comprehensive solution to intelligently manage heating in your home, responding to the ever-changing status of your windows. This ingenious system seamlessly orchestrates the interaction between your heating device and window sensors, ensuring optimal comfort and energy efficiency. Here's how it works:
    \n
    \n### Core Functionality:
    \n
    \n- **Dynamic Heating Control:** Window State Heating Control monitors the real-time status of your room and zone windows through dedicated sensors. When windows open or close, the system takes immediate action to either switch your heating off or on.
    \n
    \n- **Room and Zone Sensing:** You have the flexibility to choose between room-level and zone-level window sensors. Room sensors focus on specific spaces, while zone sensors cover entire areas like your apartment. Zone detection takes precedence; if zone windows are open, heating remains off until they are closed.
    \n- **Minute-by-Minute Surveillance:** The system constantly evaluates both your heating device and window sensors, conducting minute-by-minute checks. This guarantees a reliable and responsive operation, preventing any undesirable surprises.
    \n- **Precise Timing:** After a change in window status, Window State Heating Control calculates precise waiting times in seconds. These times account for both window open and close events, ensuring heating decisions are well-timed and efficient.
    \n
    \n### Optional Features:
    \n
    \n- **Reset Schedules:** For added convenience, you can integrate your scheduling entities. When the heating is turned on, you have the option to reset your schedule to its default state. This ensures that your preferred temperature settings are reactivated automatically.
    \n
    \n### In Simple Terms:
    \n
    \nImagine having a heating system that adapts to your environment with unmatched precision. Window State Heating Control offers you the luxury of warm, cozy spaces, but only when you need it. It keeps an eagle eye on your windows and works diligently to balance comfort and energy savings. Plus, if you have schedules set up, it synchronizes them effortlessly with your heating preferences.
    \n
    \nWhether you want to ensure your heating doesn't run when the windows are open, or you wish to enjoy a toasty room as soon as you close the windows, this control system is the key to a more comfortable and efficient home. It's the future of heating, where technology and convenience come together to make your life easier and your energy usage smarter.
    "
  input:
    room_sensor:
      name: Room window sensor
      description: Select the sensor entity that detects the state of the room windows
      default: []
      selector:
        entity:
          domain: binary_sensor
          device_class: window
    zone_sensor:
      name: Zone window sensor
      description: Select the sensor entity that detects the state of the zone windows
      default: []
      selector:
        entity:
          domain: binary_sensor
          device_class: window
    heating_device:
      name: Heating device
      description: Select the entity that controls the heating system
      selector:
        target:
          entity:
            domain: climate
    schedules:
      name: Scheduler entity
      description: Select the scheduler entities to be reset when the heating is switched on
      default: []
      selector:
        target:
          entity:
            domain: switch
    room_off_delay:
      name: Room window open delay
      description: Set the delay to turn off the heating after opening a room window
      default: 15
      selector:
        number:
          min: 0.0
          max: 30.0
          unit_of_measurement: seconds
          step: 1.0
          mode: slider
    zone_off_delay:
      name: Zone window open delay
      description: Set the delay to turn off the heating after a zone window is open.
      default: 5
      selector:
        number:
          min: 1.0
          max: 15.0
          unit_of_measurement: minutes
          step: 1.0
          mode: slider
    room_on_delay:
      name: Window close delay
      description: Set the delay to turn on the heating after closing the room or zone windows
      default: 30
      selector:
        number:
          min: 0.0
          max: 60.0
          unit_of_measurement: seconds
          step: 1.0
          mode: slider
variables:
  room_sensor: !input room_sensor
  room_state: "{{ (iif(states(room_sensor) == 'on', 'open', 'close')) if (room_sensor) else 'none' }}"
  zone_sensor: !input zone_sensor
  zone_state: "{{ (iif(states(zone_sensor) == 'on', 'open', 'close')) if (zone_sensor) else 'none' }}"
  heating_device: !input heating_device
  heating_state: "{{ iif(states(heating_device.entity_id) != 'off') }}"
  schedules: !input schedules
  room_off_delay: !input room_off_delay
  room_on_delay: !input room_on_delay
  zone_off_delay: !input zone_off_delay
  room_last_seconds: "{{ ((now() - states[room_sensor].last_changed).total_seconds() | int) if (room_sensor) else 999 }}"
  zone_last_seconds: "{{ ((now() - states[zone_sensor].last_changed).total_seconds() | int) if (zone_sensor) else 999 }}"
  room_off_timer: "{{ max(room_off_delay - room_last_seconds, 0) if (room_state == 'open') else (room_off_delay) }}"
  room_on_timer: "{{ max(room_on_delay - room_last_seconds, 0) if (room_state == 'close') else (room_on_delay) }}"
  zone_off_timer: "{{ max((zone_off_delay * 60) - zone_last_seconds, 0) if (zone_state == 'open') else (zone_off_delay * 60) }}"
  zone_on_timer: "{{ max(room_on_delay - zone_last_seconds, 0) if (zone_state == 'close') else (room_on_delay) }}"
trigger:
  - platform: state
    entity_id: !input room_sensor
  - platform: state
    entity_id: !input zone_sensor
  - platform: time_pattern
    minutes: "/1"
mode: restart
max_exceeded: silent
action:
  - or:
      - "{{ (heating_state) and ((room_state == 'open') or (zone_state == 'open')) }}"
      - "{{ not (heating_state) and (zone_state == 'close') }}"
      - "{{ not (heating_state) and (room_state == 'close') and (zone_state == 'open') and (zone_off_timer != 0) }}"
  - if:
      - "{{ (heating_state) }}"
    then:
      - if:
          - "{{ (room_state == 'open') }}"
        then:
          - delay:
              seconds: "{{ min(room_off_timer, zone_off_timer) }}"
        else: # (zone_state == 'open')
          - delay:
              seconds: "{{ zone_off_timer }}"
      - service: climate.set_hvac_mode
        data:
          hvac_mode: "off"
        target:
          entity_id: "{{ heating_device.entity_id }}"
    else: # not (heating_state)
      - if:
          - "{{ (zone_state == 'close') }}"
        then:
          - delay:
              seconds: "{{ zone_on_timer }}"
        else: # (room_state == 'open')
          - delay:
              seconds: "{{ min(room_on_timer, zone_on_timer) }}"
      - service: switch.turn_off
        data: {}
        target:
          entity_id: "{{ schedules.entity_id }}"
      - delay:
          milliseconds: 100
      - service: switch.turn_on
        data: {}
        target:
          entity_id: "{{ schedules.entity_id }}"
      - delay:
          milliseconds: 1500
      - service: climate.set_hvac_mode
        data:
          hvac_mode: "heat"
        target:
          entity_id: "{{ heating_device.entity_id }}"
